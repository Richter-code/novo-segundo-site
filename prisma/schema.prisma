generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  passwordHash String?
  createdAt DateTime @default(now())
  posts     Post[]
  accounts  Account[]
  sessions  Session[]
  pets       Pet[]        @relation("UserPets")
  appointments Appointment[] @relation("UserAppointments")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}

model Category {
  id        String    @id @default(cuid())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
}

model Brand {
  id        String    @id @default(cuid())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Decimal
  imageUrl    String
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  brand       Brand?    @relation(fields: [brandId], references: [id])
  brandId     String?
  createdAt   DateTime  @default(now())
}

model Cart {
  id        String   @id @default(cuid())
  userId    String?
  items     String
  total     Decimal
  createdAt DateTime @default(now())
}

// Veterin√°ria / Pets

model Clinic {
  id            String          @id @default(cuid())
  name          String
  address       String?
  phone         String?
  imageUrl      String?
  services      VetService[]
  veterinarians Veterinarian[]
  createdAt     DateTime        @default(now())
  @@unique([name])
}

model Veterinarian {
  id        String  @id @default(cuid())
  name      String
  specialty String?
  clinic    Clinic? @relation(fields: [clinicId], references: [id])
  clinicId  String?
  createdAt DateTime @default(now())
  @@unique([name, clinicId])
}

model ServiceCategory {
  id        String      @id @default(cuid())
  name      String
  services  VetService[]
  createdAt DateTime    @default(now())
  @@unique([name])
}

model VetService {
  id              String           @id @default(cuid())
  name            String
  description     String
  price           Decimal
  durationMinutes Int
  category        ServiceCategory? @relation(fields: [categoryId], references: [id])
  categoryId      String?
  clinic          Clinic?          @relation(fields: [clinicId], references: [id])
  clinicId        String?
  createdAt       DateTime         @default(now())
  appointments    Appointment[]
  @@unique([name, clinicId])
}

model Pet {
  id        String     @id @default(cuid())
  name      String
  species   String     @default("OTHER")
  breed     String?
  owner     User?      @relation("UserPets", fields: [ownerId], references: [id])
  ownerId   String?
  createdAt DateTime   @default(now())
  appointments Appointment[]
}

model Appointment {
  id          String            @id @default(cuid())
  service     VetService        @relation(fields: [serviceId], references: [id])
  serviceId   String
  pet         Pet               @relation(fields: [petId], references: [id])
  petId       String
  owner       User?             @relation("UserAppointments", fields: [ownerId], references: [id])
  ownerId     String?
  scheduledAt DateTime
  status      String            @default("PENDING")
  createdAt   DateTime          @default(now())
}

// NextAuth models (Prisma Adapter)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
